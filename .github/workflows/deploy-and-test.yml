name: Deploy to EC2 and Run Tests

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy backend files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "./backend"
          target: "/home/ubuntu/cpen321-jelx"

      - name: Rebuild and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/cpen321-jelx/backend

            # Write Google application credentials JSON to a file
            echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" | base64 -d > google-credentials.json

            # Write secrets into .env
            cat > .env <<EOF
            PORT=${{ secrets.PROD_PORT }}
            DB_URI=${{ secrets.PROD_DB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            GOOGLE_APPLICATION_CREDENTIALS='google-credentials.json'
            EOF

            # Give .env and google-credentials.json permissions
            chmod 600 .env google-credentials.json

            # Install npm packages
            npm ci

            # Build and run container
            docker-compose down
            docker-compose --env-file .env build
            docker-compose --env-file .env up -d

  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Run Tests on EC2 and Capture Results
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_KEY }}
      #     script: |
      #       cd /home/ubuntu/cpen321-jelx/backend
      #       
      #       # Run Jest tests with coverage enabled
      #       echo "Running Jest tests..."
      #       npm test -- --ci --coverage > test-results.log 2>&1
      #       TEST_EXIT_CODE=$?
      # 
      #       # Display test results
      #       echo "Test Results:"
      #       cat test-results.log
      # 
      #       # Verify if coverage report exists
      #       if [[ -d coverage ]]; then
      #         echo "Coverage report generated successfully."
      #       else
      #         echo "WARNING: No coverage report found!"
      #       fi
      # 
      #       # Fail workflow if tests fail
      #       exit $TEST_EXIT_CODE

      - name: Set up SSH Key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Files from EC2 to GitHub Runner
        run: |
          echo "Copying files from EC2 to GitHub Runner..."
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/cpen321-jelx/backend/test-results.log $GITHUB_WORKSPACE/test-results/test-results.log || echo "ERROR: SCP command failed!"
          
      - name: Fix Permissions for Copied Files
        run: |
          echo "Fixing file permissions..."
          chmod -R 777 $GITHUB_WORKSPACE/test-results/test-results.log
          ls -la $GITHUB_WORKSPACE/test-results/test-results.log

      - name: Upload Test Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: $GITHUB_WORKSPACE/test-results/test-results.log
          retention-days: 7
          if-no-files-found: warn





