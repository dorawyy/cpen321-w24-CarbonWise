name: Deploy to EC2 and Run Tests

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy backend files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "./backend"
          target: "/home/ubuntu/cpen321-jelx"

      - name: Rebuild and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/cpen321-jelx/backend

            # Write Google application credentials JSON to a file
            echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" | base64 -d > google-credentials.json

            # Write secrets into .env
            cat > .env <<EOF
            PORT=${{ secrets.PROD_PORT }}
            DB_URI=${{ secrets.PROD_DB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            GOOGLE_APPLICATION_CREDENTIALS='google-credentials.json'
            EOF

            # Give .env and google-credentials.json permissions
            chmod 600 .env google-credentials.json

            # Install npm packages
            npm ci

            # Build and run container
            docker-compose down
            docker-compose --env-file .env build
            docker-compose --env-file .env up -d

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Run Tests on EC2 and Capture Results
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/cpen321-jelx/backend
            
            # Ensure MongoDB is running
            docker-compose up -d mongo

            # Ensure dependencies are installed
            echo "Installing dependencies..."
            npm install

            # Run Jest tests with coverage enabled
            echo "Running Jest tests..."
            npm test -- --ci --coverage > test-results.log 2>&1
            TEST_EXIT_CODE=$?

            # Display test results
            echo "Test Results:"
            cat test-results.log

            # Verify if coverage report exists
            if [[ -d coverage ]]; then
              echo "Coverage report generated successfully."
            else
              echo "WARNING: No coverage report found!"
            fi

            # Fail workflow if tests fail
            exit $TEST_EXIT_CODE